import numpy as np

def transition_hashing(input_size, output_size, origin_weight, seed=5):
    """ Returns a transition matrix whose shape is identical to output_size,
    each entry is a position in input generated by hashing function.
    if the entry is negative, negate the corresponding element in the wh output.
    :param seed: random generator seed
    :param input_size: length of input original weight vector
    :param output_size: size of output virtual weight matrix, (m, n)
    :param origin_weight: original weight vector
    :return: transition matrix and virtual weight matrix
    """
    np.random.seed(seed)
    transition = np.random.randint(1, input_size * 2 + 1, size=output_size) # 1-size: neg, else pos
    output = np.zeros(output_size)
    for i in range(input_size):
        output[transition == i + 1 + input_size] = origin_weight[i]
        output[transition == input_size - i] = -origin_weight[i]
    return transition, output

if __name__ == '__main__':
    a = [1, 2, 3]
    a = np.array(a)
    transition, out = transition_hashing(3, (4, 4), a, seed=6)
    print(transition, out)